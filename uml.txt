@startuml

' definitions
' -----------

' package "controller"
class Application
' end package

' package "model"
class ProjectList
class Project
class Task
' end package

' package "model.command"
class CommandHelp
class CommandUncheck
class CommandDelete
class CommandAddTask
class FactoryCommand
abstract Command
class CommandAddProject
class CommandShow
class Factory
class CommandCheck
' end package

' content
' -------

' ProjectList:
ProjectList --> "1" ProjectList
ProjectList --> Project
ProjectList : List lProject
ProjectList : ProjectList getInstance()
ProjectList : List getlProject()
ProjectList : void setlProject(List)
ProjectList : void addP(Project)
ProjectList : String toString()

' CommandUncheck:
Command <|-- CommandUncheck
CommandUncheck : void execute()

' CommandAddProject:
Command <|-- CommandAddProject
CommandAddProject : void execute()

' Factory:
Factory --> "1" FactoryCommand
Factory : Command execCommand(String)

' Application:
Application : void main(String)

' CommandShow:
Command <|-- CommandShow
CommandShow : void execute()

' Task:
Task : int tCount
Task : int getId()
Task : void setId(int)
Task : String getDescription()
Task : void setDescription(String)
Task : boolean isDone()
Task : void setDone(boolean)

' CommandHelp:
Command <|-- CommandHelp
CommandHelp : void execute()

' Project:
Project --> Task
Project : int getId()
Project : void setId(int)
Project : String getpName()
Project : void setpName(String)
Project : ArrayList getaLTask()
Project : void setaLTask(ArrayList)

' CommandDelete:
Command <|-- CommandDelete
CommandDelete : void execute()

' Command:
Command : void execute()

' CommandCheck:
Command <|-- CommandCheck
CommandCheck : void execute()

' CommandAddTask:
Command <|-- CommandAddTask
CommandAddTask : void execute()

' FactoryCommand:
FactoryCommand --> Command
FactoryCommand : Command createCommand(String)

@enduml
